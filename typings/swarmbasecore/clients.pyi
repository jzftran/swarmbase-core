from .utils import make_request as make_request
from _typeshed import Incomplete
from abc import ABC
from typing import Any

class BaseClient(ABC):
    base_url: Incomplete
    client_url: Incomplete
    def __init__(self, base_url: str, resource: str) -> None: ...
    def create(self, data: dict[str, Any]): ...
    def list(self): ...
    def get(self, resource_id: str): ...
    def update(self, resource_id: str, data: dict[str, Any]): ...
    def delete(self, resource_id: str): ...

class AgentClient(BaseClient):
    def __init__(self, base_url: str) -> None: ...
    def assign_tool_to_agent(self, agent_id: str, tool_data: dict[str, Any]): ...
    def remove_tool_from_agent(self, agent_id: str, tool_data: dict[str, Any]): ...
    def get_tools(self, agent_id: str): ...
    def add_relationship(self, agent_id: str, data: dict[str, Any]): ...
    def get_relationships(self, agent_id: str): ...
    def remove_relationship(self, agent_id: str, related_agent_id: str): ...

class FrameworkClient(BaseClient):
    def __init__(self, base_url: str) -> None: ...
    def add_swarm_to_framework(self, framework_id: str, swarm_data: dict[str, Any]): ...
    def remove_swarm_from_framework(self, framework_id: str, swarm_data: dict[str, Any]): ...
    def add_tool_to_framework(self, framework_id: str, tool_data): ...

class SwarmClient(BaseClient):
    def __init__(self, base_url: str) -> None: ...

class ToolClient(BaseClient):
    def __init__(self, base_url: str) -> None: ...
