from .agency_chart import AgencyChart as AgencyChart
from .clients import AgentClient as AgentClient, BaseClient as BaseClient, FrameworkClient as FrameworkClient, SwarmClient as SwarmClient, ToolClient as ToolClient
from .utils import AgentRelationship as AgentRelationship, RelationshipType as RelationshipType, pascal_case as pascal_case, snake_case as snake_case
from _typeshed import Incomplete
from typing import Any, ClassVar, Generic, TypeVar

class Product:
    id: str | None
    count: ClassVar[int]
    extra_attributes: dict[str, Any]
    def validate_variable_name(cls, v: str) -> str: ...
    @property
    def name(self): ...
    @property
    def instance_name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    def __post_init__(self) -> None: ...
T = TypeVar('T', bound='Product')

class BaseBuilder(Generic[T]):
    client: BaseClient
    def __post_init__(self) -> None: ...
    def reset(self) -> None: ...
    def set_id(self, id: str): ...
    def set_name(self, name: str): ...
    def set_extra_attributes(self, extra_attributes): ...
    def build(self): ...
    @property
    def product(self) -> T: ...

class Tool(Product):
    description: str | None
    version: str | None
    code: str | None
    def __post_init__(self) -> None: ...
    @property
    def class_name(self): ...

class ToolBuilder(BaseBuilder[Tool]):
    client: ToolClient
    def __post_init__(self) -> None: ...
    def set_description(self, description) -> None: ...
    def set_version(self, version) -> None: ...
    def set_code(self, code) -> None: ...
    def from_id(self, id: str): ...

class Agent(Product):
    description: str | None
    instructions: str | None
    relationships: list[AgentRelationship]
    tools: list[Tool]
    def __post_init__(self) -> None: ...

class AgentBuilder(BaseBuilder[Agent]):
    client: AgentClient
    def __post_init__(self) -> None: ...
    def set_description(self, description: str): ...
    def set_instructions(self, instructions: str): ...
    def add_relationship(self, relationship: AgentRelationship): ...
    def add_tool(self, tool: Tool): ...
    def from_id(self, id: str): ...

class Framework(Product):
    def __post_init__(self) -> None: ...

class FrameworkBuilder(BaseBuilder[Framework]):
    client: FrameworkClient
    def __post_init__(self) -> None: ...

class Swarm(Product):
    parent_id: str | None
    agents: dict[str, Agent]
    tools: dict[str, Tool]
    agency_chart: Incomplete
    def __post_init__(self) -> None: ...

class SwarmBuilder(BaseBuilder[Swarm]):
    client: SwarmClient
    def __post_init__(self) -> None: ...
    def add_agent(self, agent: Agent): ...
    def add_agents_relationship(self, relationship: AgentRelationship): ...
    def add_tool(self, tool: Tool): ...
    def from_id(self, id: str): ...
