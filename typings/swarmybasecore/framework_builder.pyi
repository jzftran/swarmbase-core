from .builders import Agent as Agent, Swarm as Swarm, Tool as Tool
from .create_venv import create_directory as create_directory, create_virtualenv as create_virtualenv, write_file as write_file
from .utils import snake_case as snake_case
from pathlib import Path
from typing import Protocol

class FrameworkCreator(Protocol):
    @classmethod
    def swarm_as_string(cls, swarm: Swarm) -> str: ...
    @classmethod
    def agent_as_string(agent: Agent) -> str: ...
    @classmethod
    def tool_as_string(tool: Tool) -> str: ...
    @classmethod
    def create_swarm_files(cls, swarm: Swarm, base_path: Path) -> None: ...
    @staticmethod
    def setup_virtualenv(swarm_name: str, requirements_file: Path | None) -> None: ...

class SwarmBaseCreator(FrameworkCreator):
    @staticmethod
    def swarm_as_string(swarm: Swarm) -> str: ...
    @staticmethod
    def agent_as_string(agent: Agent) -> str: ...
    @staticmethod
    def tool_as_string(tool: Tool) -> str: ...
    @classmethod
    def create_swarm_files(cls, swarm: Swarm, base_path: Path) -> None: ...

class LangchainCreator(FrameworkCreator):
    @staticmethod
    def swarm_as_string(swarm: Swarm) -> str: ...
    @classmethod
    def agent_as_string(cls, agent: Agent) -> str: ...
    @classmethod
    def tool_as_string(cls, tool: Tool) -> str: ...
    @classmethod
    def create_swarm_files(cls, swarm: Swarm, base_path: Path) -> None: ...

class CreatorFactory:
    @staticmethod
    def get_creator(creator_type: str) -> FrameworkCreator: ...
